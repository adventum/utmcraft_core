import logging

from django.utils.datastructures import MultiValueDictKeyError
from django.utils.translation import gettext_lazy as _
from drf_spectacular.types import OpenApiTypes
from drf_spectacular.utils import OpenApiParameter, extend_schema, inline_serializer
from rest_framework import serializers
from rest_framework.exceptions import APIException
from rest_framework.permissions import IsAuthenticated
from rest_framework.renderers import TemplateHTMLRenderer
from rest_framework.response import Response
from rest_framework.views import APIView

from core.selectors import get_user_form_by_pk
from core.services.form_constructor import FormFactory
from core.services.utm_builder import UtmBuilder
from core.services.utm_parser import UtmParser

log = logging.getLogger(__name__)


class FormHTMLAPIView(APIView):
    permission_classes = (IsAuthenticated,)
    renderer_classes = (TemplateHTMLRenderer,)
    template_name = "includes/core/form_block.html"

    @extend_schema(
        description=_("–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π HTML —Ñ–æ—Ä–º—ã UTM-–ø—Ä–æ–º–µ—Ç—á–∏–∫–∞."),
        parameters=[
            OpenApiParameter(
                "form_id", OpenApiTypes.INT, OpenApiParameter.QUERY, required=True
            )
        ],
        responses=OpenApiTypes.STR,
    )
    def get(self, request, *args, **kwargs):  # noqa
        try:
            form_id = int(request.GET["form_id"])
        except MultiValueDictKeyError:
            return Response(template_name="includes/core/form_not_found.html")
        form = get_user_form_by_pk(user=request.user, pk=form_id)
        if not form:
            log.error(f"Form pk={form_id} not found for user.pk={request.user.pk}")
            return Response(template_name="includes/core/form_not_found.html")
        return Response(FormFactory(user=request.user, form=form)())


class ResultBlocksHTMLAPIView(APIView):
    permission_classes = (IsAuthenticated,)
    renderer_classes = (TemplateHTMLRenderer,)
    template_name = "includes/core/result_area.html"

    @extend_schema(
        description=_("–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π HTML –∑–æ–Ω—ã –±–ª–æ–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–º–µ—Ç–∫–∏."),
        request=inline_serializer(
            name="ResultBlocksHTMLRequest",
            fields={
                "form_id": serializers.IntegerField(),
                "form_data": serializers.DictField(),
            },
        ),
        responses=OpenApiTypes.STR,
    )
    def post(self, request, *args, **kwargs):  # noqa
        try:
            if utm_result := UtmBuilder(user=request.user, post_data=request.data)():
                return Response(utm_result)
            return Response(
                template_name="includes/core/utm_build_failed.html",
                data={
                    "error_text": _(
                        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–º–µ—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫"
                        " —Ñ–æ—Ä–º–µ –ø—Ä–æ–º–µ—Ç—á–∏–∫–∞."
                    )
                },
            )
        except Exception as e:
            log.exception(
                "Failed to build UTM for"
                f" user.pk={request.user.pk} post_data={request.data}. Exception: {e}."
            )
            return Response(
                template_name="includes/core/utm_build_failed.html",
                data={
                    "error_text": _(
                        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–º–µ—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏"
                        " UTM-–ø—Ä–æ–º–µ—Ç—á–∏–∫–∞ üòî –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–π. –ü—Ä–∏–Ω–æ—Å–∏–º"
                        " —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è üôè"
                    )
                },
            )


class UTMParserAPIView(APIView):
    permission_classes = (IsAuthenticated,)

    @extend_schema(
        description=_(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã UTM-–ø—Ä–æ–º–µ—Ç—á–∏–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞"
            " –ø—Ä–æ–º–µ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º."
        ),
        parameters=[
            OpenApiParameter(
                "utm_hashcode", OpenApiTypes.STR, OpenApiParameter.QUERY, required=True
            )
        ],
        responses=inline_serializer(
            name="UTMParserResponse",
            fields={
                "form_id": serializers.IntegerField(),
                "form_data": serializers.DictField(),
                "error": serializers.CharField(),
            },
        ),
    )
    def get(self, request, *args, **kwargs):  # noqa
        utm_hashcode = self.request.GET.get("utm_hashcode")
        try:
            return Response(
                UtmParser(user=self.request.user)(utm_hashcode=utm_hashcode)
            )
        except Exception as e:
            log.exception(
                "Failed to get UTM parser initial form data. Request sent by"
                f" user.pk={request.user.pk} utm_hashcode={utm_hashcode}."
                f" Exception: {e}"
            )
            raise APIException(f"Failed to get UTM parser initial form data")
